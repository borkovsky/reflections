When would you want to use a remote repository rather than keeping all your work local?
Collaboration, access from anywhere, remote storage. 

Why might you want to always pull changes manually rather than 
having Git automatically stay up-to-date with your remote repository?
If you are working  on a project, or fixing something that you want to 
keep independent. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Think of it this way:
The repo[sitory] corresponds to the collaborated work of the team across one or many branches. 
All contributors have their own copy of it.

Each fork of the main repo corresponds to a contributor's work. 
A fork is really a Github (not Git) construct to store a clone of the repo in your user account. 
As a clone, it will contain all the branches in the main repo at the time you made the fork.

Each branch within the fork and/or in the main repo can correspond to several kinds of things, depending on how you want to work. 
Each branch could refer to a version of the project but can also correspond to different channels of development, like hotfixes or experimental work.

The pull request (in the GitHub ecosystem) corresponds to the task. 
Every time I want to contribute an isolated finished task to the main repo, I create a pull request corresponding to the commits made in that task. These commits are pulled from either my fork or my branch to the main repo.

A commit is a set of changes to the code. This is one of the most interesting things about Git. You don't transfer files, you transfer logs of changes.

What is the benefit of having a copy of the last 
known state of the remote stored locally?

How would you collaborate without using Git or GitHub? 
What would be easier, and what would be harder?
It is easier to merge code and lots of lines with Git and Github.
Discussing changes is easier in person.